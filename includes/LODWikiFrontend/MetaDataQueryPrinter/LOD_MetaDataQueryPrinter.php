<?php
/**
 * @file
 * @ingroup LinkedData
 */

/*  Copyright 2010, ontoprise GmbH
*  This file is part of the LinkedData-Extension.
*
*   The LinkedData-Extension is free software; you can redistribute it and/or modify
*   it under the terms of the GNU General Public License as published by
*   the Free Software Foundation; either version 3 of the License, or
*   (at your option) any later version.
*
*   The LinkedData-Extension is distributed in the hope that it will be useful,
*   but WITHOUT ANY WARRANTY; without even the implied warranty of
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*   GNU General Public License for more details.
*
*   You should have received a copy of the GNU General Public License
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

/**
 * This is the main file of the meta data query printer. It enables displaying
 * meta data within results that are generated by other query printers.
 * 
 * @author Thomas Schweitzer
 * Date: 21.09.2010
 * 
 */
if ( !defined( 'MEDIAWIKI' ) ) {
	die( "This file is part of the LinkedData extension. It is not a valid entry point.\n" );
}

 //--- Includes ---
 global $haclgIP;
//require_once("$haclgIP/...");

/**
 * The class LODMetaDataQueryPrinter sets up the framework for enhancing query
 * results with meta data and displaying them in query result printers.
 * 
 * The meta data query printer is enabled with the global variable 
 * $lodgEnableMetaDataQueryPrinter.
 * 
 * @author Thomas Schweitzer
 * 
 */
class  LODMetaDataQueryPrinter  {
	
	//--- Constants ---
//	const XY= 0;		// the result has been added since the last time
		
	//--- Private fields ---
	
	/**
	 * Constructor for  LODMetaDataQueryPrinter
	 *
	 * @param type $param
	 * 		Name of the notification
	 */		
	function __construct() {
//		$this->mXY = $xy;
	}
	

	//--- getter/setter ---
//	public function getXY()           {return $this->mXY;}

//	public function setXY($xy)               {$this->mXY = $xy;}
	
	//--- Public methods ---
	
	
	/**
	 * This function is called by SMW when data types are registered in the
	 * SMWDataValueFactory. Some types of SMW are replaced by subclasses that
	 * enhance query results with data values.
	 *
	 * @return boolean 
	 * 		Returns <true> to keep the chain of hooks running.
	 */
	public static function onSmwInitDatatypesHooks() {
		global $wgAutoloadClasses, $lodgIP;
		
		SMWDataValueFactory::registerDatatype('_str', 'LODStringValue');
		SMWDataValueFactory::registerDatatype('_txt', 'LODStringValue');
		SMWDataValueFactory::registerDatatype('_cod', 'LODStringValue');
		
		SMWDataValueFactory::registerDatatype('_ema', 'LODURIValue'); // Email type
		SMWDataValueFactory::registerDatatype('_uri', 'LODURIValue'); // URL/URI type
		SMWDataValueFactory::registerDatatype('_anu', 'LODURIValue'); // Annotation URI type
		SMWDataValueFactory::registerDatatype('_tel', 'LODURIValue'); // Phone number (URI) type

		SMWDataValueFactory::registerDatatype('_wpg', 'LODWikiPageValue'); // Page type
		SMWDataValueFactory::registerDatatype('_wpp', 'LODWikiPageValue'); // Property page type
		SMWDataValueFactory::registerDatatype('_wpc', 'LODWikiPageValue'); // Category page type
		SMWDataValueFactory::registerDatatype('_wpf', 'LODWikiPageValue'); // Form page type for Semantic Forms

		SMWDataValueFactory::registerDatatype('_num', 'LODNumberValue'); // Number
		
		SMWDataValueFactory::registerDatatype('_tem', 'LODTemperatureValue'); // Temperature

		SMWDataValueFactory::registerDatatype('_dat', 'LODTimeValue'); // Date / Time

		SMWDataValueFactory::registerDatatype('_boo', 'LODBoolValue'); // Boolean

		SMWDataValueFactory::registerDatatype('_rec', 'LODRecordValue'); // Record
		
		return true;
	}
	
	/** 
	 * This function is called by the hook "ProcessQueryResults". 
	 * It augments the data values of the result with an HTML representation
	 * of the value's meta-data.
	 *  
	 * @param SMWQuery $query
	 * 		This query returned the given results.
	 * @param SMWQueryResult $queryResult
	 * 		This query result is augmented.
	 * 
	 * @return boolean
	 * 		Returns <true> to keep the chain of hooks running
	 */
	public static function onProcessQueryResults(SMWQuery &$query, 
												 SMWQueryResult &$queryResult) {

		if (! $queryResult instanceof SMWHaloQueryResult) {
			// Result must be a HaloQueryResult
			return true;
		}
		
		// get a meta data formatter according to the query parameter
		// metadataformat
		$mdprinter = self::getMetaDataPrinter($query, $queryResult);
		
		// Iterate all rows
		while ($row = $queryResult->getNext()) {
			// Iterate all cells in a row
			foreach ($row as $cell) {
				// Iterate all values in a cell
				while ($value = $cell->getNextObject()) {
					$ro = new ReflectionObject($value);
					if ($ro->hasMethod("setMetaDataPrinter")) {
						$value->setMetaDataPrinter($mdprinter);
					}	
				}
			}
		}
		
		$queryResult->resetResultArray();
		
		global $wgOut;
		// Add required JavaScripts and style sheets
		$mdprinter->addJavaScripts();
		$mdprinter->addStyleSheets();
		return true;
	}
	
	//--- Private methods ---
	
	/**
	 * Queries that are configured to show the meta-data of the result must have
	 * the parameter "metadataformat" with the ID of a meta-data printer e.g.
	 * "table". If this parameter is missing, the default will be "table". 
	 * This method creates an instance of a meta-data printer for the given ID
	 * in the $query. 
	 * If there is no printer for this ID a printer that shows an appropriate
	 * error message will be returned.
	 * 
	 * @param SMWQuery $query
	 * 		The meta-data of the result of this query will be processed. The
	 * 		query should contain the parameter "metadataformat".
	 * @param SMWQueryResult $queryResult
	 * 		This is the result of $query. It is passed to the meta-data printer
	 * 		that will be created in this method.
	 * @return LODMetaDataPrinter
	 * 		An instance of a meta-data printer
	 */
	private static function getMetaDataPrinter(SMWQuery $query, 
											   SMWQueryResult $queryResult) {
											   	
		$mdformat = @$query->params['metadataformat'];
		if (!isset($mdformat)) {
			$mdformat = "table";
		}

		global $lodgMetaDataPrinters;
		$class = @$lodgMetaDataPrinters[strtolower($mdformat)];
		if (!isset($class)) {
			// Return the meta data printer for errors, if there is no printer for
			// the given format.
			$class = "LODMDPError";
		}
		
		$p = new $class($query, $queryResult);
		return $p;
											   	
	}
}